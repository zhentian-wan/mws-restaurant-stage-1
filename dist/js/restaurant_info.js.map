{"version":3,"sources":["dbhelper.js","restaurant_info.js"],"names":["DBPromise","formatSingleRestaurantData","r","Object","assign","photograph","id","formatRestaurantsData","restaurants","map","dbPromise","idb","open","db","oldVersion","createObjectStore","put","keyPath","transaction","objectStore","createIndex","then","tx","peopleStore","name","age","favoriteAnimal","complete","index","getAll","openCursor","cursor","advance","logPerson","continue","get","store","DBHelper","_classCallCheck","this","neighborhoods","cuisines","details","callback","_this","length","data","catch","err","_this2","resneighborhoodstaurants","_this3","fetch","DATABASE_URL","res","json","forEach","d","setLocalData","error","_this4","Number","console","log","_this5","restaurant","_defineProperty","cuisine","fetchRestaurants","results","filter","cuisine_type","neighborhood","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","_restaurant$photograp","split","_restaurant$photograp2","_slicedToArray","_restaurant$photograp3","_restaurant$photograp4","ext","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","window","addEventListener","navigator","serviceWorker","register","registration","initMap","fetchRestaurantFromURL","handleFetchRestaurantFromURL","handleFecthRestaurant","self","Map","document","getElementById","zoom","center","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","undefined","animalIndex","innerHTML","address","image","className","imageUrlForRestaurant","ageIndex","fillReviewsHTML","fillRestaurantHoursHTML","operatingHours","operating_hours","keyvalStore","row","createElement","time","key","appendChild","hours","reviews","noReviews","container","ul","review","createReviewHTML","li","wrapper","rating","append","date","comments","fillBreadcrumb","querySelector","link","href","setAttribute","breadcrumb","replace","RegExp","exec","decodeURIComponent"],"mappings":"85BAAA,IAAIA,eAAAA,EAwIJ,SAASC,2BAA2BC,GAClC,OAAOC,OAAOC,UAAWF,GACvBG,WAAYH,EAAEG,WAAgBH,EAAEG,WAApB,OAA0CH,EAAEI,GAA5C,SAQhB,SAASC,sBAAsBC,GAC7B,OAAOA,EAAYC,IAAIR,6BAjJzB,WACE,IAAMS,EAAYC,IAAIC,KAAK,oBAAqB,EAAG,SAASC,GAC1D,OAAQA,EAAGC,YACT,KAAK,EACiBD,EAAGE,kBAAkB,UAC7BC,IAAI,iBAAkB,OAIpC,KAAK,EACHH,EAAGE,kBAAkB,UAAYE,QAAS,SAI5C,KAAK,EACiBJ,EAAGK,YAAYC,YAAY,UACnCC,YAAY,SAAU,kBAGpC,KAAK,EACiBP,EAAGK,YAAYC,YAAY,UACnCC,YAAY,MAAO,UAKrCV,EAAUW,KAAK,SAAAR,GACb,IAAMS,EAAKT,EAAGK,YAAY,SAAU,aAC9BK,EAAcD,EAAGH,YAAY,UAyBnC,OAxBAI,EAAYP,KACVQ,KAAM,YACNC,IAAK,GACLC,eAAgB,QAGlBH,EAAYP,KACVQ,KAAM,SACNC,IAAK,GACLC,eAAgB,QAGlBH,EAAYP,KACVQ,KAAM,UACNC,IAAK,GACLC,eAAgB,QAGlBH,EAAYP,KACVQ,KAAM,WACNC,IAAK,GACLC,eAAgB,QAGXJ,EAAGK,WAGZjB,EAAUW,KAAK,SAAAR,GAKb,OAJWA,EAAGK,YAAY,UACHC,YAAY,UACHS,MAAM,UAEnBC,OAAO,SAK5BnB,EACGW,KAAK,SAAAR,GAKJ,OAJWA,EAAGK,YAAY,UACHC,YAAY,UACNS,MAAM,OAEnBE,eAEjBT,KAAK,SAAAU,GACJ,GAAKA,EAEL,OAAOA,EAAOC,QAAQ,KAEvBX,KAAK,SAASY,EAAUF,GACvB,GAAKA,EAIL,OAAOA,EAAOG,WAAWb,KAAKY,KAGlCvB,EAAUW,KAAK,SAAAR,GAGb,OAFWA,EAAGK,YAAY,UACHC,YAAY,UAChBgB,IAAI,SAGzBzB,EAAUW,KAAK,SAAAR,GACb,IAAMS,EAAKT,EAAGK,YAAY,SAAU,aAGpC,OAFoBI,EAAGH,YAAY,UACvBH,IAAI,WAAY,UACrBM,EAAGK,WAGZ3B,UAGSW,IAAIC,KAAK,iBAAkB,EAAG,SAAAC,GACnC,OAAQA,EAAGC,YACT,KAAK,EAEH,IAAMsB,EAAQvB,EAAGE,kBAAkB,eACjCE,QAAS,OAGXmB,EAAMhB,YAAY,UAAW,QAG/B,KAAK,EACHP,EAAGE,kBAAkB,YACrBF,EAAGE,kBAAkB,iBAGvB,KAAK,EACHF,EAAGE,kBAAkB,UAAWE,QAAS,UAxHnD,OAuJMoB,oBAEJ,SAAAA,IAAcC,gBAAAC,KAAAF,GACZE,KAAK/B,eACL+B,KAAKC,iBACLD,KAAKE,YACLF,KAAKG,0EAYalC,GAClB+B,KAAK/B,YAAcA,oDAGYmC,GAAU,IAAAC,EAAAL,KACzC,OAAOvC,UAAUqB,KAAK,SAAAR,GAEpB,MAAKA,GAAO+B,EAAKpC,aAAeoC,EAAKpC,YAAYqC,QAMjD,OAFWhC,EAAGK,YAAY,eACTC,YAAY,eAAeS,MAAM,WAE/CC,SACAR,KAAK,SAAAyB,GAAA,OAAQH,EAAS,KAAMG,KAC5BC,MAAM,SAAAC,GAAA,OAAOL,EAASK,EAAK,8DAICL,GAAU,IAAAM,EAAAV,KAC3C,OAAOvC,UAAUqB,KAAK,SAAAR,GAEpB,MAAKA,GAAOoC,EAAKC,0BAA4BD,EAAKT,cAAcK,QAMhE,OAFWhC,EAAGK,YAAY,iBACTC,YAAY,iBAE1BU,SACAR,KAAK,SAAAyB,GAAA,OAAQH,EAAS,KAAMG,KAC5BC,MAAM,SAAAC,GAAA,OAAOL,EAASK,EAAK,yDAIJL,GAAU,IAAAQ,EAAAZ,KACtC,OAAOvC,UAAUqB,KAAK,SAAAR,GAEpB,MAAKA,GAAOsC,EAAKV,UAAYU,EAAKV,SAASI,QAM3C,OAFWhC,EAAGK,YAAY,YACTC,YAAY,YAE1BU,SACAR,KAAK,SAAAyB,GAAA,OAAQH,EAAS,KAAMG,KAC5BC,MAAM,SAAAC,GAAA,OAAOL,EAASK,EAAK,mDAOVL,GACtB,GAAIJ,KAAK/B,aAAe+B,KAAK/B,YAAYqC,OACvC,OAAON,KAAK/B,YAGd4C,MAAMf,EAASgB,cACZhC,KAAK,SAAAiC,GAAA,OAAOA,EAAIC,SAChBlC,KAAKd,uBACLc,KAAK,SAAAyB,GAOJ,OANA9C,UAAUqB,KAAK,SAAAR,GACb,IAAMS,EAAKT,EAAGK,YAAY,cAAe,aACnCkB,EAAQd,EAAGH,YAAY,eAE7B,OADA2B,GAAQA,EAAKU,QAAQ,SAAAC,GAAA,OAAKrB,EAAMpB,IAAIyC,KAC7BnC,EAAGK,WAELmB,IAERzB,KAAK,SAAAb,GAAA,OAAemC,EAAS,KAAMnC,KACnCa,KAAK,SAAAb,GAAA,OAAe6B,EAASqB,aAAalD,KAC1CuC,MAAM,SAAAY,GAAA,OAAShB,EAASgB,EAAO,6DAGArD,EAAIqC,GAAU,IAAAiB,EAAArB,KAChD,OAAOvC,UAAUqB,KAAK,SAAAR,GAEpB,MAAKA,GAAO+C,EAAKlB,SAAWkB,EAAKlB,QAAQpC,IAMzC,OAFWO,EAAGK,YAAY,UACTC,YAAY,UAChBgB,IAAI0B,OAAOvD,IACrBe,KAAK,SAAAyB,GACJgB,QAAQC,IAAI,OAAQjB,GACpBH,EAAS,KAAMG,KAEhBC,MAAM,SAAAC,GAAA,OAAOL,EAASK,EAAK,sDAOP1C,EAAIqC,GAAU,IAAAqB,EAAAzB,KACvCa,MAASf,EAASgB,aAAlB,IAAkC/C,GAC/Be,KAAK,SAAAiC,GAAA,OAAOA,EAAIC,SAChBlC,KAAKpB,4BACLoB,KAAK,SAAC4C,GAQL,OAPAjE,UAAUqB,KAAK,SAACR,GACd,IAAMS,EAAKT,EAAGK,YAAY,SAAU,aAGpC,OAFcI,EAAGH,YAAY,UACvBH,IAAIiD,GACH3C,EAAGK,WAEZqC,EAAKtB,QAAUvC,OAAOC,UAAW4D,EAAKtB,QAAvBwB,mBAAmC5D,EAAK2D,IAChDA,IAER5C,KAAK,SAAA4C,GACAA,EAEFtB,EAAS,KAAMsB,GAGftB,EAAS,4BAA6B,QAGzCI,MAAM,SAAAY,GAAA,OAAShB,EAASgB,EAAO,yDAMJQ,EAASxB,GAEvCN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAChC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CAEL,IAAMU,EAAU7D,EAAY8D,OAAO,SAAApE,GAAA,OAAKA,EAAEqE,cAAgBJ,IAC1DxB,EAAS,KAAM0B,4DAQgBG,EAAc7B,GAGjDN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAChC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CAEL,IAAMU,EAAU7D,EAAY8D,OAAO,SAAApE,GAAA,OAAKA,EAAEsE,cAAgBA,IAC1D7B,EAAS,KAAM0B,sEASnBF,EACAK,EACA7B,GAGAN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAChC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CACL,IAAIU,EAAU7D,EACC,OAAX2D,IAEFE,EAAUA,EAAQC,OAAO,SAAApE,GAAA,OAAKA,EAAEqE,cAAgBJ,KAE9B,OAAhBK,IAEFH,EAAUA,EAAQC,OAAO,SAAApE,GAAA,OAAKA,EAAEsE,cAAgBA,KAElD7B,EAAS,KAAM0B,iDAQK1B,GAExBN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAEhC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CAEL,IAAMnB,EAAgBhC,EAAYC,IAChC,SAACgE,EAAGC,GAAJ,OAAUlE,EAAYkE,GAAGF,eAGrBG,EAAsBnC,EAAc8B,OACxC,SAACG,EAAGC,GAAJ,OAAUlC,EAAcoC,QAAQH,IAAMC,IAGxC1E,UAAUqB,KAAK,SAAAR,GACb,IACMuB,EADKvB,EAAGK,YAAY,gBAAiB,aAC1BC,YAAY,iBAE7BwD,GACEA,EAAoBnB,QAAQ,SAACC,EAAGiB,GAAJ,OAAUtC,EAAMpB,IAAIyC,EAAGiB,OAEvD/B,EAAS,KAAMgC,4CAQAhC,GAEnBN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAChC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CAEL,IAAMlB,EAAWjC,EAAYC,IAAI,SAACgE,EAAGC,GAAJ,OAAUlE,EAAYkE,GAAGH,eAEpDM,EAAiBpC,EAAS6B,OAC9B,SAACG,EAAGC,GAAJ,OAAUjC,EAASmC,QAAQH,IAAMC,IAGnC1E,UAAUqB,KAAK,SAAAR,GACb,IACMuB,EADKvB,EAAGK,YAAY,WAAY,aACrBC,YAAY,YAE7B0D,GAAkBA,EAAerB,QAAQ,SAACC,EAAGiB,GAAJ,OAAUtC,EAAMpB,IAAIyC,EAAGiB,OAElE/B,EAAS,KAAMkC,+CAQGZ,GACtB,MAAA,wBAA+BA,EAAW3D,iDAMf2D,GAAY,IAAAa,EACnBb,EAAW5D,WAAW0E,MAAM,KADTC,EAAAC,eAAAH,EAAA,GAEvC,MAAA,QAFuCE,EAAA,GAEvC,cAFuCA,EAAA,uCAQtBf,GAAY,IAAAiB,EACTjB,EAAW5D,WAAW0E,MAAM,KADnBI,EAAAF,eAAAC,EAAA,GACtB1D,EADsB2D,EAAA,GAChBC,EADgBD,EAAA,GAE7B,MAAA,QAAe3D,EAAf,cAAiC4D,EAAjC,eAAmD5D,EAAnD,eAAsE4D,EAAtE,eAAwF5D,EAAxF,cAA0G4D,EAA1G,wDAM4BnB,EAAYxD,GAQxC,OAPe,IAAI4E,OAAOC,KAAKC,QAC7BC,SAAUvB,EAAWwB,OACrBC,MAAOzB,EAAWzC,KAClBmE,IAAKtD,EAASuD,iBAAiB3B,GAC/BxD,IAAKA,EACLoF,UAAWR,OAAOC,KAAKQ,UAAUC,4CArRnC,MAAA,6CCvKAC,OAAOC,iBAAiB,OAAQ,WACxB,kBAAmBC,UAGnBA,UAAUC,cAAcC,SAAS,UAAU/E,KAAK,SAAUgF,GACtDvC,QAAQC,IAAI,yCAA0CsC,KACvDtD,MAAM,SAAUY,GACfG,QAAQC,IAAI,sCAAuCJ,KAGvDG,QAAQC,IAAI,wCDNV,IAAAE,gBAAAA,EACNxD,SAAAA,EAKFuF,OAAAM,QAAA,WAAQC,uBAAAC,+BAEP,IAAAC,sBAAA,SAAA9D,GAAA,OAAA,SAAAgB,EAAAM,GCcHH,QAAQC,IAAI,wBAAyBE,IDZnCyC,KAAAzC,WAAAA,IAGE1C,qBACDoB,EAAA,KAAAsB,IAHOH,QAAAH,MAAAA,KAKA,SAAA6C,6BAAA7C,EAAAM,GAAEN,EAERpC,QAAAA,MAAAA,IAnBJmF,KAAAjG,IAAA,IAAA4E,OAAAC,KAAAqB,IAAAC,SAAAC,eAAA,QADFC,KAAA,GCyCUC,OAAQ9C,EAAWwB,ODhBnBpE,aAAK,IAEPE,eAAcD,GACpBC,SAAYP,uBAAIiD,EAAAyC,KAAAjG,MAOde,IAAAA,uBADc,SAAAmB,GAEdlB,GAAAA,KAFcwC,WAAhBtB,EAAA,KAAA+D,KAAAzC,gBAEExC,CAKAD,IAAAA,EAAMwF,mBADQ,MAEdvF,GAAAA,EAKAD,SAAMyF,oBADQ3G,EAAAmG,sBAAA9D,QANA,CCsBZA,EDtBJ,0BCsBoB,SASlBuE,mBAAqB,WAAkC,IAAjCjD,EAAiC,EAAAkD,UAAAtE,aAAAuE,IAAAD,UAAA,GAAAA,UAAA,GAApBT,KAAKzC,WDhB5CvD,EAAekG,SAAAC,eAAM,mBACnBrF,EAAMF,UAAQJ,EAAYM,KAC1BA,EAAMD,aAAcD,WAAGH,KACvBK,EAAM6F,aAAc9F,aAApB,cAAA0C,EAAAzC,MAEO6F,SAAAR,eAAP,sBACAS,UAAArD,EAAAsD,QANF,IAAAC,EAAAZ,SAAAC,eAAA,kBC0BEW,EAAMC,UAAY,iBDhBpB/G,EAAAA,IAAA2B,SACQqF,sBAAMzD,GACVuD,EAAMlG,IAAN,cAA0B2C,EAA1BzC,KACAgG,EAAMjG,OAAAA,SAAiBJ,YAAY8C,GACnCuD,EAAMG,MAAAA,iCAEU7F,SAAAA,eAAhB,sBAEIwF,UAAArD,EAAUM,aAGdN,EAAcjC,iBAEfX,0BAGCuG,mBAMFC,wBAA0B,WAA1B,IAA0BC,EAA1B,EAAAX,UAAAtE,aAAAuE,IAAAD,UAAA,GAAAA,UAAA,GAAAT,KAAAzC,WAAA8D,gBACMC,EAAAA,SAAiB7G,eAAY,oBACnC,IAAA,IAAO6G,KAAAA,EAAP,CAHF,IAAAC,EAAArB,SAAAsB,cAAA,MAMU7G,EAAKuF,SAAAsB,cAAM,MACb5G,EAAAA,UAAQJ,EACR8G,EAAAA,YAAc1G,GAEpB,IAAUK,EAAAA,SAAVuG,cAAA,MAJFC,EAAAb,UAAAQ,EAAAM,GCoBMH,EAAII,YAAYF,GAEhBG,EAAMD,YAAYJ,KDRhBL,gBAAc/G,WAAoC,IAApCA,EAAoC,EAAAsG,UAAAtE,aAAAuE,IAAAD,UAAA,GAAAA,UAAA,GAAjCpG,KAAAA,WAAkBwH,QACjCtH,EAAAA,SAAS4F,eAAA,qBADuCnB,EAAlDkB,SAAAsB,cAAA,MCqBN,GDlBMxC,EAAA4B,UAAA,UACAlF,EAAAA,YAAMhB,ICiBPmH,EAAS,CDdV,IAAAC,EAAA5B,SAAAsB,cAAA,KACErH,OADM2H,EAAAlB,UAAA,uBAAEmB,EAAAJ,YAAAG,GAGT,IAAAE,EAAA9B,SAAAC,eAAA,gBCkBL0B,EAAQ/E,QAAQ,SAAAmF,GDhBZD,EAAAL,YAAAO,iBAAAD,MAAUF,EAAAJ,YAAAK,IAvHlBE,iBAAA,SAAAD,GCiJI,IAAME,EAAKjC,SAASsB,cAAc,MAE5BY,EAAUlC,SAASsB,cAAc,WACvCY,EAAQrB,UAAY,iBAEpB,IAAMjG,EAAOoF,SAASsB,cAAc,MACpC1G,EAAKiG,UAAY,cACjBjG,EAAK8F,UAAYqB,EAAOnH,KDlB5BsH,EAAS7I,YAAAA,GAELI,IAAAA,EAAcA,SAAF6H,cAAoB7H,KADlC0I,EAAAzB,UAAA,GAAAqB,EAAAI,OAGDA,EAAAtB,UAAA,gBCoBGqB,EAAQT,YAAYU,GAEpBF,EAAGG,OAAOF,GAEV,IAAMG,EAAOrC,SAASsB,cAAc,KDlBxCe,EAAS1I,UAAAA,EAAAA,KACP0I,EAAOzI,UAAYC,cACpBoI,EAAAR,YAAAY,GAED,IAAAC,EAAAtC,SAAAsB,cAAA,KAGM7F,OCiBF6G,EAAS5B,UAAYqB,EAAOO,SAC5BL,EAAGR,YAAYa,GDlBb7G,GAGF8G,eAAmB,WAAnB,IAAmBlF,EAAnB,EAAAkD,UAAAtE,aAAAuE,IAAAD,UAAA,GAAAA,UAAA,GAAAT,KAAAzC,WACKzB,EAALoE,SAAAwC,cAAA,eACK3G,EAAAA,SAALyF,cAAA,MACKxF,EAALkE,SAAAsB,cAAA,KACDmB,EAAAC,KAAAjH,SAAAuD,iBAAA3B,GCwBCoF,EAAK/B,UAAYrD,EAAWzC,KDtB9B6H,EAAAE,aAAA,eAAA,QCwBEV,EAAGG,OAAOK,GACVG,EAAWnB,YAAYQ,IAMrB7B,mBAAqB,SAACxF,EDtBNhB,GAClBmF,IAAKnF,EAAAA,OAAcA,SAAnB8I,MACD9H,EAAAA,EAAAiI,QAAA,UAAA,QCuBC,IACIpF,EADU,IAAIqF,OAAJ,OAAkBlI,EAAlB,qBACMmI,KAAKhE,GACzB,OAAKtB,EDvBoCA,EAAA,GCyBlCuF,mBAAmBvF,EAAQ,GAAGoF,QAAQ,MAAO,MDzBX,GCuBpB","file":"restaurant_info.js","sourcesContent":["let DBPromise;\r\n\r\n(() => {\r\n  const dbPromise = idb.open(\"restuarant_app_db\", 4, function(db) {\r\n    switch (db.oldVersion) {\r\n      case 0: {\r\n        const keyvalStore = db.createObjectStore(\"keyval\");\r\n        keyvalStore.put(\"value is value\", \"key\");\r\n      }\r\n\r\n      // name is the primary key\r\n      case 1: { // eslint-disable-line\r\n        db.createObjectStore(\"people\", { keyPath: \"name\" });\r\n      }\r\n\r\n      // create index 'favoriteAnimal'\r\n      case 2: { // eslint-disable-line\r\n        const peopleStore = db.transaction.objectStore(\"people\");\r\n        peopleStore.createIndex(\"animal\", \"favoriteAnimal\"); // named index as 'animal'\r\n      }\r\n\r\n      case 3: { // eslint-disable-line\r\n        const peopleStore = db.transaction.objectStore(\"people\");\r\n        peopleStore.createIndex(\"age\", \"age\");\r\n      }\r\n    }\r\n  });\r\n\r\n  dbPromise.then(db => {\r\n    const tx = db.transaction(\"people\", \"readwrite\");\r\n    const peopleStore = tx.objectStore(\"people\");\r\n    peopleStore.put({\r\n      name: \"Sam Munoz\",\r\n      age: 25,\r\n      favoriteAnimal: \"dog\"\r\n    });\r\n\r\n    peopleStore.put({\r\n      name: \"Wam ok\",\r\n      age: 34,\r\n      favoriteAnimal: \"cat\"\r\n    });\r\n\r\n    peopleStore.put({\r\n      name: \"Kim Bad\",\r\n      age: 35,\r\n      favoriteAnimal: \"dog\"\r\n    });\r\n\r\n    peopleStore.put({\r\n      name: \"Jam Good\",\r\n      age: 21,\r\n      favoriteAnimal: \"dog\"\r\n    });\r\n\r\n    return tx.complete;\r\n  });\r\n\r\n  dbPromise.then(db => {\r\n    const tx = db.transaction(\"people\");\r\n    const peopleStore = tx.objectStore(\"people\");\r\n    const animalIndex = peopleStore.index(\"animal\");\r\n\r\n    return animalIndex.getAll(\"dog\");\r\n    // return animalIndex.getAll();\r\n    // return peopleStore.getAll();\r\n  });\r\n\r\n  dbPromise\r\n    .then(db => {\r\n      const tx = db.transaction(\"people\");\r\n      const peopleStore = tx.objectStore(\"people\");\r\n      const ageIndex = peopleStore.index(\"age\");\r\n\r\n      return ageIndex.openCursor();\r\n    })\r\n    .then(cursor => {\r\n      if (!cursor) return;\r\n      // Skip first two\r\n      return cursor.advance(2);\r\n    })\r\n    .then(function logPerson(cursor) {\r\n      if (!cursor) return;\r\n      // loop each one get value out ot it\r\n      // console.log(\"Cursor at: \", cursor.value.name);\r\n      // continue looping\r\n      return cursor.continue().then(logPerson);\r\n    });\r\n\r\n  dbPromise.then(db => {\r\n    const tx = db.transaction(\"keyval\");\r\n    const keyvalStore = tx.objectStore(\"keyval\");\r\n    return keyvalStore.get(\"key\");\r\n  });\r\n\r\n  dbPromise.then(db => {\r\n    const tx = db.transaction(\"keyval\", \"readwrite\");\r\n    const keyvalStore = tx.objectStore(\"keyval\");\r\n    keyvalStore.put(\"barValue\", \"fooKey\");\r\n    return tx.complete;\r\n  });\r\n\r\n  DBPromise = openIDB();\r\n\r\n  function openIDB() {\r\n    return idb.open(\"restaurant-app\", 3, db => {\r\n      switch (db.oldVersion) {\r\n        case 0: {\r\n          // Create table 'restaurants', primary key is id\r\n          const store = db.createObjectStore(\"restaurants\", {\r\n            keyPath: \"id\"\r\n          });\r\n          // if index is needed, put down below\r\n          store.createIndex(\"by-name\", \"name\");\r\n        }\r\n\r\n        case 1: { // eslint-disable-line\r\n          db.createObjectStore(\"cuisines\");\r\n          db.createObjectStore(\"neighborhoods\");\r\n        }\r\n\r\n        case 2: { // eslint-disable-line\r\n          db.createObjectStore(\"detail\", {keyPath: \"id\"});\r\n        }\r\n      }\r\n    });\r\n  }\r\n})();\r\n\r\n/**\r\n * photograph no longer return 1.jpg\r\n in api returns 1, so format data here\r\n also the last one doesn't have, using id to replace\r\n * @param r\r\n * @returns {{} & any & {photograph: string}}\r\n */\r\nfunction formatSingleRestaurantData(r) {\r\n  return Object.assign({}, r, {\r\n    photograph: r.photograph ? `${r.photograph}.jpg` : `${r.id}.jpg`\r\n  });\r\n}\r\n\r\n/**\r\n * Format restaurants array data\r\n * @param restaurants\r\n */\r\nfunction formatRestaurantsData(restaurants) {\r\n  return restaurants.map(formatSingleRestaurantData);\r\n}\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {   // eslint-disable-line no-unused-vars\r\n\r\n  constructor() {\r\n    this.restaurants = [];\r\n    this.neighborhoods = [];\r\n    this.cuisines = [];\r\n    this.details = {};\r\n  }\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  static setLocalData(restaurants) {\r\n    this.restaurants = restaurants;\r\n  }\r\n\r\n  static fetchRestaurantsFromCache(callback) {\r\n    return DBPromise.then(db => {\r\n      // only fetch from db once\r\n      if (!db || (this.restaurants && this.restaurants.length)) {\r\n        return;\r\n      }\r\n\r\n      const tx = db.transaction(\"restaurants\");\r\n      const store = tx.objectStore(\"restaurants\").index(\"by-name\");\r\n      return store\r\n        .getAll()\r\n        .then(data => callback(null, data))\r\n        .catch(err => callback(err, null));\r\n    });\r\n  }\r\n\r\n  static fetchNeighborhoodsFromCache(callback) {\r\n    return DBPromise.then(db => {\r\n      // only fetch from db once\r\n      if (!db || (this.resneighborhoodstaurants && this.neighborhoods.length)) {\r\n        return;\r\n      }\r\n\r\n      const tx = db.transaction(\"neighborhoods\");\r\n      const store = tx.objectStore(\"neighborhoods\");\r\n      return store\r\n        .getAll()\r\n        .then(data => callback(null, data))\r\n        .catch(err => callback(err, null));\r\n    });\r\n  }\r\n\r\n  static fetchCuisinesFromCache(callback) {\r\n    return DBPromise.then(db => {\r\n      // only fetch from db once\r\n      if (!db || (this.cuisines && this.cuisines.length)) {\r\n        return;\r\n      }\r\n\r\n      const tx = db.transaction(\"cuisines\");\r\n      const store = tx.objectStore(\"cuisines\");\r\n      return store\r\n        .getAll()\r\n        .then(data => callback(null, data))\r\n        .catch(err => callback(err, null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    if (this.restaurants && this.restaurants.length) {\r\n      return this.restaurants;\r\n    }\r\n\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(res => res.json())\r\n      .then(formatRestaurantsData)\r\n      .then(data => {\r\n        DBPromise.then(db => {\r\n          const tx = db.transaction(\"restaurants\", \"readwrite\");\r\n          const store = tx.objectStore(\"restaurants\");\r\n          data && data.forEach(d => store.put(d));\r\n          return tx.complete;\r\n        });\r\n        return data;\r\n      })\r\n      .then(restaurants => callback(null, restaurants))\r\n      .then(restaurants => DBHelper.setLocalData(restaurants))\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  static fetchRestaurantByIdFromCache(id, callback) {\r\n    return DBPromise.then(db => {\r\n      // only fetch from db once\r\n      if (!db || (this.details && this.details[id])) {\r\n        return;\r\n      }\r\n\r\n      const tx = db.transaction(\"detail\");\r\n      const store = tx.objectStore(\"detail\");\r\n      return store.get(Number(id))\r\n        .then(data =>  {\r\n          console.log(\"data\", data);\r\n          callback(null, data);\r\n        })\r\n        .catch(err => callback(err, null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.DATABASE_URL}/${id}`)\r\n      .then(res => res.json())\r\n      .then(formatSingleRestaurantData)\r\n      .then((restaurant) => {\r\n        DBPromise.then((db) => {\r\n          const tx = db.transaction('detail', 'readwrite');\r\n          const store = tx.objectStore('detail');\r\n          store.put(restaurant);\r\n          return tx.complete;\r\n        });\r\n        this.details = Object.assign({}, this.details, { [id]: restaurant });\r\n        return restaurant;\r\n      })\r\n      .then(restaurant => {\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback(\"Restaurant does not exist\", null);\r\n        }\r\n      })\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != \"all\") {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != \"all\") {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n\r\n        DBPromise.then(db => {\r\n          const tx = db.transaction(\"neighborhoods\", \"readwrite\");\r\n          const store = tx.objectStore(\"neighborhoods\");\r\n\r\n          uniqueNeighborhoods &&\r\n            uniqueNeighborhoods.forEach((d, i) => store.put(d, i));\r\n        });\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n\r\n        DBPromise.then(db => {\r\n          const tx = db.transaction(\"cuisines\", \"readwrite\");\r\n          const store = tx.objectStore(\"cuisines\");\r\n\r\n          uniqueCuisines && uniqueCuisines.forEach((d, i) => store.put(d, i));\r\n        });\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    const [name, ext] = restaurant.photograph.split(\".\");\r\n    return `/img/${name}-320_small.${ext}`;\r\n  }\r\n\r\n  /**\r\n   * Generate name of different size of images\r\n   */\r\n  static imageSrcset(restaurant) {\r\n    const [name, ext] = restaurant.photograph.split(\".\");\r\n    return `/img/${name}-320_small.${ext} 400w, /img/${name}-640_medium.${ext} 640w, /img/${name}-800_large.${ext} 800w `;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n","(() => {\n    window.addEventListener('load', () => {\n        if ('serviceWorker' in navigator) {\n            // Register a service worker hosted at the root of the\n            // site using the default scope.\n            navigator.serviceWorker.register('/sw.js').then(function (registration) {\n                console.log('Service worker registration succeeded:', registration);\n            }).catch(function (error) {\n                console.log('Service worker registration failed:', error);\n            });\n        } else {\n            console.log('Service workers are not supported.');\n        }\n    });\n})();\n\nlet restaurant; // eslint-disable-line no-unused-vars\nlet map; // eslint-disable-line no-unused-vars\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n    fetchRestaurantFromURL(handleFetchRestaurantFromURL);\n};\n\nconst handleFecthRestaurant = (callback) => (error, restaurant) => {\n    console.log(\"handleFecthRestaurant\", restaurant)\n    self.restaurant = restaurant;\n    if (!restaurant) {\n        console.error(error);\n        return;\n    }\n    fillRestaurantHTML();\n    callback(null, restaurant);\n};\n\nfunction handleFetchRestaurantFromURL(error, restaurant) {\n    if (error) {\n        // Got an error!\n        console.error(error);\n    } else {\n        self.map = new google.maps.Map(document.getElementById(\"map\"), {\n            zoom: 16,\n            center: restaurant.latlng,\n            scrollwheel: false\n        });\n        fillBreadcrumb(restaurant);\n        DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    }\n}\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = callback => {\n    if (self.restaurant) {\n        // restaurant already fetched!\n        callback(null, self.restaurant);\n        return;\n    }\n    const id = getParameterByName(\"id\");\n    if (!id) {\n        // no id found in URL\n        const error = \"No restaurant id in URL\";\n        callback(error, null);\n    } else {\n        DBHelper.fetchRestaurantById(id, handleFecthRestaurant(callback));\n    }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById(\"restaurant-name\");\n    name.innerHTML = restaurant.name;\n    name.setAttribute('tabindex', '0');\n    name.setAttribute('aria-label', `restaurant ${restaurant.name}`);\n\n    const address = document.getElementById(\"restaurant-address\");\n    address.innerHTML = restaurant.address;\n\n    const image = document.getElementById(\"restaurant-img\");\n    image.className = \"restaurant-img\";\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.alt = `Restaurant ${restaurant.name}`;\n    image.srcset = DBHelper.imageSrcset(restaurant);\n    image.sizes = \"(max-width: 640px) 100vw, 50vw\";\n\n    const cuisine = document.getElementById(\"restaurant-cuisine\");\n    cuisine.innerHTML = restaurant.cuisine_type;\n\n    // fill operating hours\n    if (restaurant.operating_hours) {\n        fillRestaurantHoursHTML();\n    }\n    // fill reviews\n    fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById(\"restaurant-hours\");\n    for (let key in operatingHours) {\n        const row = document.createElement(\"tr\");\n\n        const day = document.createElement(\"td\");\n        day.innerHTML = key;\n        row.appendChild(day);\n\n        const time = document.createElement(\"td\");\n        time.innerHTML = operatingHours[key];\n        row.appendChild(time);\n\n        hours.appendChild(row);\n    }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById(\"reviews-container\");\n    const title = document.createElement(\"h3\");\n    title.innerHTML = \"Reviews\";\n    container.appendChild(title);\n\n    if (!reviews) {\n        const noReviews = document.createElement(\"p\");\n        noReviews.innerHTML = \"No reviews yet!\";\n        container.appendChild(noReviews);\n        return;\n    }\n    const ul = document.getElementById(\"reviews-list\");\n    reviews.forEach(review => {\n        ul.appendChild(createReviewHTML(review));\n    });\n    container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = review => {\n    const li = document.createElement(\"li\");\n\n    const wrapper = document.createElement(\"article\");\n    wrapper.className = \"review-wrapper\";\n\n    const name = document.createElement(\"h4\");\n    name.className = \"review-name\";\n    name.innerHTML = review.name;\n    wrapper.appendChild(name);\n\n    const rating = document.createElement(\"p\");\n    rating.innerHTML = `${review.rating}`;\n    rating.className = \"review-rating\";\n    wrapper.appendChild(rating);\n\n    li.append(wrapper);\n\n    const date = document.createElement(\"p\");\n    date.innerHTML = review.date;\n    date.className = \"review-date\";\n    li.appendChild(date);\n\n    const comments = document.createElement(\"p\");\n    comments.innerHTML = review.comments;\n    li.appendChild(comments);\n\n    return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.querySelector(\"#breadcrumb\");\n    const li = document.createElement(\"li\");\n    const link = document.createElement('a');\n    link.href = DBHelper.urlForRestaurant(restaurant);\n    link.innerHTML = restaurant.name;\n    link.setAttribute('aria-current', 'page');\n    li.append(link);\n    breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return \"\";\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n};\n"]}