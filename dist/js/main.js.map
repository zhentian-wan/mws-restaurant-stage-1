{"version":3,"sources":["main.js","dbhelper.js"],"names":["window","addEventListener","navigator","serviceWorker","register","then","registration","console","log","error","restaurants","cuisines","neighborhoods","markers","document","fetchNeighborhoods","fetchCuisines","DBHelper","fillNeighborhoodsHTML","arguments","length","undefined","self","select","getElementById","forEach","neighborhood","option","createElement","name","fillCuisinesHTML","cuisine","innerHTML","value","map","google","maps","Map","zoom","center","lng","scrollwheel","initMap","lat","keyboardShortcuts","nSelect","cIndex","cSelect","selectedIndex","nIndex","fillRestaurantsHTML","resetRestaurants","m","setMap","ul","restaurant","append","createRestaurantHTML","image","imageUrlForRestaurant","li","info","className","address","more","id","detail","addMarkersToMap","hidden","mapMarkerForRestaurant","event","addListener","marker","appendChild","href","url","push","formatSingleRestaurantData","r","Object","assign","photograph","formatRestaurantsData","callback","fetch","DATABASE_URL","res","json","catch","fetchRestaurants","results","filter","cuisine_type","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","_restaurant$photograp","split","_restaurant$photograp2","_slicedToArray","_restaurant$photograp3","_restaurant$photograp4","ext","Marker","position","latlng","title","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"main.js","sourcesContent":["(() => {\r\n    window.addEventListener('load', () => {\r\n        if ('serviceWorker' in navigator) {\r\n            // Register a service worker hosted at the root of the\r\n            // site using the default scope.\r\n            navigator.serviceWorker.register('/sw.js').then(function (registration) {\r\n                console.log('Service worker registration succeeded:', registration);\r\n            }).catch(function (error) {\r\n                console.log('Service worker registration failed:', error);\r\n            });\r\n        } else {\r\n            console.log('Service workers are not supported.');\r\n        }\r\n    });\r\n})();\r\n\r\n\r\nlet restaurants, // eslint-disable-line no-unused-vars\r\n    neighborhoods, // eslint-disable-line no-unused-vars\r\n    cuisines; // eslint-disable-line no-unused-vars\r\nlet map; // eslint-disable-line no-unused-vars\r\nlet markers = []; // eslint-disable-line no-unused-vars\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n\r\n    console.log(\"document.activeElement\", document.activeElement);\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        option.name = neighborhood;\r\n        select.append(option);\r\n    });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false,\r\n        keyboardShortcuts: false\r\n    });\r\n    updateRestaurants();\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n\r\n    const image = document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.alt = `Restaurant ${restaurant.name}`;\r\n    li.append(image);\r\n\r\n    const info = document.createElement('div');\r\n    info.className = 'restaurant-info';\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = restaurant.name;\r\n    name.id = `restaurant-item-${restaurant.id}`;\r\n    info.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    info.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    info.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    more.setAttribute('aria-labelledby', `restaurant-detail-${restaurant.id}`);\r\n    info.append(more);\r\n\r\n    const detail = document.createElement('span');\r\n    detail.hidden = true;\r\n    detail.id = `restaurant-detail-${restaurant.id}`;\r\n    detail.innerHTML = `Restaurant name: ${restaurant.name}, address:${restaurant.address}, click the link to view detail`;\r\n\r\n    li.appendChild(detail);\r\n    li.append(info);\r\n\r\n    return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n};","/**\r\n * photograph no longer return 1.jpg\r\n     in api returns 1, so format data here\r\n     also the last one doesn't have, using id to replace\r\n * @param r\r\n * @returns {{} & any & {photograph: string}}\r\n */\r\nfunction formatSingleRestaurantData(r) {\r\n    return Object.assign(\r\n        {},\r\n        r,\r\n        {\r\n            photograph: r.photograph ?\r\n                `${r.photograph}.jpg` :\r\n                `${r.id}.jpg`\r\n        }\r\n    )\r\n}\r\n\r\n/**\r\n * Format restaurants array data\r\n * @param restaurants\r\n */\r\nfunction formatRestaurantsData(restaurants) {\r\n    return restaurants.map(\r\n        formatSingleRestaurantData\r\n    );\r\n}\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper { // eslint-disable-line no-unused-vars\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL)\r\n            .then(res => res.json())\r\n            .then(formatRestaurantsData)\r\n            .then(restaurants => callback(null, restaurants))\r\n            .catch(error => callback(error, null));\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n\r\n        fetch(`${DBHelper.DATABASE_URL}/${id}`)\r\n            .then(res => res.json())\r\n            .then(formatSingleRestaurantData)\r\n            .then(restaurant => {\r\n                if (restaurant) {\r\n                    // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else {\r\n                    // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n\r\n            })\r\n            .catch(error => callback(error, null));\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        const [name, ext] = restaurant.photograph.split('.');\r\n        return (`/img/${name}-320_small.${ext}`);\r\n    }\r\n\r\n    /**\r\n     * Generate name of different size of images\r\n     */\r\n    static imageSrcset(restaurant) {\r\n        const [name, ext] = restaurant.photograph.split('.');\r\n        return `/img/${name}-320_small.${ext} 400w, /img/${name}-640_medium.${ext} 640w, /img/${name}-800_large.${ext} 800w `;\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n                position: restaurant.latlng,\r\n                title: restaurant.name,\r\n                url: DBHelper.urlForRestaurant(restaurant),\r\n                map: map,\r\n                animation: google.maps.Animation.DROP\r\n            }\r\n        );\r\n        return marker;\r\n    }\r\n\r\n}\r\n"]}