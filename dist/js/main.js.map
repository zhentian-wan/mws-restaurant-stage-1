{"version":3,"sources":["dbhelper.js","main.js"],"names":["DBPromise","formatSingleRestaurantData","r","Object","assign","photograph","id","formatRestaurantsData","restaurants","map","dbPromise","idb","open","db","oldVersion","createObjectStore","put","keyPath","transaction","objectStore","createIndex","then","tx","peopleStore","name","age","favoriteAnimal","complete","index","getAll","openCursor","cursor","advance","logPerson","continue","get","store","DBHelper","_classCallCheck","this","neighborhoods","cuisines","details","callback","_this","length","data","catch","err","_this2","resneighborhoodstaurants","_this3","fetch","DATABASE_URL","res","json","forEach","d","setLocalData","error","_this4","Number","console","log","_this5","restaurant","_defineProperty","cuisine","fetchRestaurants","results","filter","cuisine_type","neighborhood","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","_restaurant$photograp","split","_restaurant$photograp2","_slicedToArray","_restaurant$photograp3","_restaurant$photograp4","ext","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","window","addEventListener","navigator","serviceWorker","register","registration","markers","document","fetchNeighborhoodsFromCache","handleNeighborhoods","fetchNeighborhoods","fetchCuisinesFromCache","handleCuisines","fetchCuisines","fetchRestaurantsFromCache","handlerCuisineAndNeighborhod","arguments","undefined","self","select","getElementById","createElement","innerHTML","option","append","fillCuisinesHTML","ageIndex","value","Map","center","lat","keyvalStore","lng","scrollwheel","resetRestaurants","fillRestaurantsHTML","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","m","setMap","ul","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","alt","info","address","more","href","setAttribute","detail","hidden","appendChild","marker","location","push"],"mappings":"85BAAA,IAAIA,eAAAA,EAwIJ,SAASC,2BAA2BC,GAClC,OAAOC,OAAOC,UAAWF,GACvBG,WAAYH,EAAEG,WAAgBH,EAAEG,WAApB,OAA0CH,EAAEI,GAA5C,SAQhB,SAASC,sBAAsBC,GAC7B,OAAOA,EAAYC,IAAIR,6BAjJzB,WACE,IAAMS,EAAYC,IAAIC,KAAK,oBAAqB,EAAG,SAASC,GAC1D,OAAQA,EAAGC,YACT,KAAK,EACiBD,EAAGE,kBAAkB,UAC7BC,IAAI,iBAAkB,OAIpC,KAAK,EACHH,EAAGE,kBAAkB,UAAYE,QAAS,SAI5C,KAAK,EACiBJ,EAAGK,YAAYC,YAAY,UACnCC,YAAY,SAAU,kBAGpC,KAAK,EACiBP,EAAGK,YAAYC,YAAY,UACnCC,YAAY,MAAO,UAKrCV,EAAUW,KAAK,SAAAR,GACb,IAAMS,EAAKT,EAAGK,YAAY,SAAU,aAC9BK,EAAcD,EAAGH,YAAY,UAyBnC,OAxBAI,EAAYP,KACVQ,KAAM,YACNC,IAAK,GACLC,eAAgB,QAGlBH,EAAYP,KACVQ,KAAM,SACNC,IAAK,GACLC,eAAgB,QAGlBH,EAAYP,KACVQ,KAAM,UACNC,IAAK,GACLC,eAAgB,QAGlBH,EAAYP,KACVQ,KAAM,WACNC,IAAK,GACLC,eAAgB,QAGXJ,EAAGK,WAGZjB,EAAUW,KAAK,SAAAR,GAKb,OAJWA,EAAGK,YAAY,UACHC,YAAY,UACHS,MAAM,UAEnBC,OAAO,SAK5BnB,EACGW,KAAK,SAAAR,GAKJ,OAJWA,EAAGK,YAAY,UACHC,YAAY,UACNS,MAAM,OAEnBE,eAEjBT,KAAK,SAAAU,GACJ,GAAKA,EAEL,OAAOA,EAAOC,QAAQ,KAEvBX,KAAK,SAASY,EAAUF,GACvB,GAAKA,EAIL,OAAOA,EAAOG,WAAWb,KAAKY,KAGlCvB,EAAUW,KAAK,SAAAR,GAGb,OAFWA,EAAGK,YAAY,UACHC,YAAY,UAChBgB,IAAI,SAGzBzB,EAAUW,KAAK,SAAAR,GACb,IAAMS,EAAKT,EAAGK,YAAY,SAAU,aAGpC,OAFoBI,EAAGH,YAAY,UACvBH,IAAI,WAAY,UACrBM,EAAGK,WAGZ3B,UAGSW,IAAIC,KAAK,iBAAkB,EAAG,SAAAC,GACnC,OAAQA,EAAGC,YACT,KAAK,EAEH,IAAMsB,EAAQvB,EAAGE,kBAAkB,eACjCE,QAAS,OAGXmB,EAAMhB,YAAY,UAAW,QAG/B,KAAK,EACHP,EAAGE,kBAAkB,YACrBF,EAAGE,kBAAkB,iBAGvB,KAAK,EACHF,EAAGE,kBAAkB,UAAWE,QAAS,UAxHnD,OAuJMoB,oBAEJ,SAAAA,IAAcC,gBAAAC,KAAAF,GACZE,KAAK/B,eACL+B,KAAKC,iBACLD,KAAKE,YACLF,KAAKG,0EAYalC,GAClB+B,KAAK/B,YAAcA,oDAGYmC,GAAU,IAAAC,EAAAL,KACzC,OAAOvC,UAAUqB,KAAK,SAAAR,GAEpB,MAAKA,GAAO+B,EAAKpC,aAAeoC,EAAKpC,YAAYqC,QAMjD,OAFWhC,EAAGK,YAAY,eACTC,YAAY,eAAeS,MAAM,WAE/CC,SACAR,KAAK,SAAAyB,GAAA,OAAQH,EAAS,KAAMG,KAC5BC,MAAM,SAAAC,GAAA,OAAOL,EAASK,EAAK,8DAICL,GAAU,IAAAM,EAAAV,KAC3C,OAAOvC,UAAUqB,KAAK,SAAAR,GAEpB,MAAKA,GAAOoC,EAAKC,0BAA4BD,EAAKT,cAAcK,QAMhE,OAFWhC,EAAGK,YAAY,iBACTC,YAAY,iBAE1BU,SACAR,KAAK,SAAAyB,GAAA,OAAQH,EAAS,KAAMG,KAC5BC,MAAM,SAAAC,GAAA,OAAOL,EAASK,EAAK,yDAIJL,GAAU,IAAAQ,EAAAZ,KACtC,OAAOvC,UAAUqB,KAAK,SAAAR,GAEpB,MAAKA,GAAOsC,EAAKV,UAAYU,EAAKV,SAASI,QAM3C,OAFWhC,EAAGK,YAAY,YACTC,YAAY,YAE1BU,SACAR,KAAK,SAAAyB,GAAA,OAAQH,EAAS,KAAMG,KAC5BC,MAAM,SAAAC,GAAA,OAAOL,EAASK,EAAK,mDAOVL,GACtB,GAAIJ,KAAK/B,aAAe+B,KAAK/B,YAAYqC,OACvC,OAAON,KAAK/B,YAGd4C,MAAMf,EAASgB,cACZhC,KAAK,SAAAiC,GAAA,OAAOA,EAAIC,SAChBlC,KAAKd,uBACLc,KAAK,SAAAyB,GAOJ,OANA9C,UAAUqB,KAAK,SAAAR,GACb,IAAMS,EAAKT,EAAGK,YAAY,cAAe,aACnCkB,EAAQd,EAAGH,YAAY,eAE7B,OADA2B,GAAQA,EAAKU,QAAQ,SAAAC,GAAA,OAAKrB,EAAMpB,IAAIyC,KAC7BnC,EAAGK,WAELmB,IAERzB,KAAK,SAAAb,GAAA,OAAemC,EAAS,KAAMnC,KACnCa,KAAK,SAAAb,GAAA,OAAe6B,EAASqB,aAAalD,KAC1CuC,MAAM,SAAAY,GAAA,OAAShB,EAASgB,EAAO,6DAGArD,EAAIqC,GAAU,IAAAiB,EAAArB,KAChD,OAAOvC,UAAUqB,KAAK,SAAAR,GAEpB,MAAKA,GAAO+C,EAAKlB,SAAWkB,EAAKlB,QAAQpC,IAMzC,OAFWO,EAAGK,YAAY,UACTC,YAAY,UAChBgB,IAAI0B,OAAOvD,IACrBe,KAAK,SAAAyB,GACJgB,QAAQC,IAAI,OAAQjB,GACpBH,EAAS,KAAMG,KAEhBC,MAAM,SAAAC,GAAA,OAAOL,EAASK,EAAK,sDAOP1C,EAAIqC,GAAU,IAAAqB,EAAAzB,KACvCa,MAASf,EAASgB,aAAlB,IAAkC/C,GAC/Be,KAAK,SAAAiC,GAAA,OAAOA,EAAIC,SAChBlC,KAAKpB,4BACLoB,KAAK,SAAC4C,GAQL,OAPAjE,UAAUqB,KAAK,SAACR,GACd,IAAMS,EAAKT,EAAGK,YAAY,SAAU,aAGpC,OAFcI,EAAGH,YAAY,UACvBH,IAAIiD,GACH3C,EAAGK,WAEZqC,EAAKtB,QAAUvC,OAAOC,UAAW4D,EAAKtB,QAAvBwB,mBAAmC5D,EAAK2D,IAChDA,IAER5C,KAAK,SAAA4C,GACAA,EAEFtB,EAAS,KAAMsB,GAGftB,EAAS,4BAA6B,QAGzCI,MAAM,SAAAY,GAAA,OAAShB,EAASgB,EAAO,yDAMJQ,EAASxB,GAEvCN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAChC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CAEL,IAAMU,EAAU7D,EAAY8D,OAAO,SAAApE,GAAA,OAAKA,EAAEqE,cAAgBJ,IAC1DxB,EAAS,KAAM0B,4DAQgBG,EAAc7B,GAGjDN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAChC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CAEL,IAAMU,EAAU7D,EAAY8D,OAAO,SAAApE,GAAA,OAAKA,EAAEsE,cAAgBA,IAC1D7B,EAAS,KAAM0B,sEASnBF,EACAK,EACA7B,GAGAN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAChC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CACL,IAAIU,EAAU7D,EACC,OAAX2D,IAEFE,EAAUA,EAAQC,OAAO,SAAApE,GAAA,OAAKA,EAAEqE,cAAgBJ,KAE9B,OAAhBK,IAEFH,EAAUA,EAAQC,OAAO,SAAApE,GAAA,OAAKA,EAAEsE,cAAgBA,KAElD7B,EAAS,KAAM0B,iDAQK1B,GAExBN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAEhC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CAEL,IAAMnB,EAAgBhC,EAAYC,IAChC,SAACgE,EAAGC,GAAJ,OAAUlE,EAAYkE,GAAGF,eAGrBG,EAAsBnC,EAAc8B,OACxC,SAACG,EAAGC,GAAJ,OAAUlC,EAAcoC,QAAQH,IAAMC,IAGxC1E,UAAUqB,KAAK,SAAAR,GACb,IACMuB,EADKvB,EAAGK,YAAY,gBAAiB,aAC1BC,YAAY,iBAE7BwD,GACEA,EAAoBnB,QAAQ,SAACC,EAAGiB,GAAJ,OAAUtC,EAAMpB,IAAIyC,EAAGiB,OAEvD/B,EAAS,KAAMgC,4CAQAhC,GAEnBN,EAAS+B,iBAAiB,SAACT,EAAOnD,GAChC,GAAImD,EACFhB,EAASgB,EAAO,UACX,CAEL,IAAMlB,EAAWjC,EAAYC,IAAI,SAACgE,EAAGC,GAAJ,OAAUlE,EAAYkE,GAAGH,eAEpDM,EAAiBpC,EAAS6B,OAC9B,SAACG,EAAGC,GAAJ,OAAUjC,EAASmC,QAAQH,IAAMC,IAGnC1E,UAAUqB,KAAK,SAAAR,GACb,IACMuB,EADKvB,EAAGK,YAAY,WAAY,aACrBC,YAAY,YAE7B0D,GAAkBA,EAAerB,QAAQ,SAACC,EAAGiB,GAAJ,OAAUtC,EAAMpB,IAAIyC,EAAGiB,OAElE/B,EAAS,KAAMkC,+CAQGZ,GACtB,MAAA,wBAA+BA,EAAW3D,iDAMf2D,GAAY,IAAAa,EACnBb,EAAW5D,WAAW0E,MAAM,KADTC,EAAAC,eAAAH,EAAA,GAEvC,MAAA,QAFuCE,EAAA,GAEvC,cAFuCA,EAAA,uCAQtBf,GAAY,IAAAiB,EACTjB,EAAW5D,WAAW0E,MAAM,KADnBI,EAAAF,eAAAC,EAAA,GACtB1D,EADsB2D,EAAA,GAChBC,EADgBD,EAAA,GAE7B,MAAA,QAAe3D,EAAf,cAAiC4D,EAAjC,eAAmD5D,EAAnD,eAAsE4D,EAAtE,eAAwF5D,EAAxF,cAA0G4D,EAA1G,wDAM4BnB,EAAYxD,GAQxC,OAPe,IAAI4E,OAAOC,KAAKC,QAC7BC,SAAUvB,EAAWwB,OACrBC,MAAOzB,EAAWzC,KAClBmE,IAAKtD,EAASuD,iBAAiB3B,GAC/BxD,IAAKA,EACLoF,UAAWR,OAAOC,KAAKQ,UAAUC,4CArRnC,MAAA,6CCvKFC,OAAOC,iBAAiB,OAAQ,WAC1B,kBAAmBC,UAGrBA,UAAUC,cACPC,SAAS,UACT/E,KAAK,SAASgF,GACbvC,QAAQC,IAAI,wCAAyCsC,KDR3DrG,MAAAA,SAAJ2D,GCWUG,QAAQC,IAAI,sCAAuCJ,KDPzDG,QAAQjD,IAAGC,wCAIR,IAAAN,iBAAAA,ECYLgC,mBAAAA,EDVIC,cAAAA,EACAhC,SAAAA,EAAQ6F,WCgBdC,SAASN,iBAAiB,mBAAoB,WDZxC5D,SAAAmE,4BAAAC,qBAAApF,KAAA,WACAqF,uBAAUrE,SAAAsE,uBAAAC,gBAAAvF,KAAA,WACRwF,kBAEDxE,SAAAyE,0BAAAC,gCAICxF,IAAAA,mBAAYH,WACbiB,SAAAqE,mBAAAD,sBCoBDA,oBAAsB,SAAC9C,EAAOnB,GDhBlC9B,EAEEoD,QAAMvC,MAAAA,IAEJC,KAAAA,cADcgB,EAEdf,sBAFce,KASdd,sBAAgB,WAAA,IAAAc,EAAA,EAAAwE,UAAAnE,aAAAoE,IAAAD,UAAA,GAAAA,UAAA,GAAAE,KAAA1E,cAHFsB,QAAhBC,IAAA,gBAAAvB,GCsBF,IAAM2E,EAASZ,SAASa,eAAe,wBDhBrC7F,EAAYP,QAAI,SAAAwD,GACdhD,IAAAA,EAAM+E,SADQc,cAAA,UAEd5F,EAAK6F,UAFS9C,EAGd9C,EAAAA,MAAAA,EAHc6F,EAAhB/F,KAAAgD,ECsBA2C,EAAOK,OAAOD,MDVdV,cAAA,WACDxE,SA5BDwE,cAAAD,iBA+BEA,eAAc1F,SAAAA,EAAYuB,GAC1BkB,ECmBAG,QAAQH,MAAMA,IDfduD,KAAAzE,SAAAA,EACAgF,qBCwBEA,iBAAmB,WAA8B,IAA7BhF,EAA6B,EAAAuE,UAAAnE,aAAAoE,IAAAD,UAAA,GAAAA,UAAA,GAAlBE,KAAKzE,SDfpC0E,EAAOO,SAAS5F,eAAhB,mBAGAW,EAAKV,QAAQ,SAAAoC,GACb,IAAAoD,EAAAhB,SAAAc,cAAA,UACAE,EAAOxF,UAAOC,EAXlBuF,EAaQI,MAAS1F,EACbkF,EAAKpF,OAAQwF,MAOjB7G,OAAAA,QAAe,WCmBfwG,KAAKzG,IAAM,IAAI4E,OAAOC,KAAKsC,IAAIrB,SAASa,eAAe,QDbvD1G,KAAAA,GACEmH,QALAC,IAAMC,UACNC,KAAA,WAKAC,aAAMF,EACNA,mBAAgB,KAIlB/H,IAAAA,6BAAA,SAAA2D,EAAAnD,GCeImD,EDZFG,QAAOnD,MAAIC,IAEPsH,iBAAA1H,GAAQ2H,wBAOPC,kBAAA,WCgBP,IAAMC,EAAU9B,SAASa,eAAe,mBDdlCkB,EAAA/B,SAAAa,eAAA,wBAAUmB,EAAAF,EAAAG,cACR3H,EAAGE,EAAAA,cAEJoD,EAAAkE,EAAAE,GAAAZ,MCkBDnD,EAAe8D,EAAQG,GAAQd,MDhBvB7D,QAAAC,IAAA,UAAAI,GAAEL,QAAAC,IAAA,eAAAS,GAETnC,SAAAqG,wCAjBHvE,EAmBDK,EACFuC,+BC0BGmB,iBAAmB,SAAA1H,GAEvB0G,KAAK1G,eDlBEP,SAAAA,eAAT,oBACEqH,UAAclH,GAAc8G,KAA5BZ,QAAA9C,QAAA,SAAAmF,GAAA,OAAAA,EAAAC,OAAA,QAGD1B,KAAAZ,WCoBCY,KAAK1G,YAAcA,GDbnB2H,oBAAuBlI,WAAvB,IAAuBA,EAAvB,EAAA+G,UAAAnE,aAAAoE,IAAAD,UAAA,GAAAA,UAAA,GAAuB/G,KAAAA,YACxB4I,EAAAtC,SAAAa,eAAA,oBCoBC5G,EAAYgD,QAAQ,SAAAS,GDlBtB4E,EAAArB,OAAAsB,qBAAA7E,MCqBE8E,mBDhBcD,qBAAA,SAAA7E,GCuBd,IAAM+E,EAAKzC,SAASc,cAAc,MDrBhC4B,EAAKzG,SAAgB6E,cAArB,OACA4B,EAAAC,UAAgB,iBAChBD,EAAAE,IAAKzG,SAAL0G,sBAAAnF,GACDgF,EAAAI,IAAA,cAAApF,EAAAzC,KCwBDwH,EAAGxB,OAAOyB,GAEV,IAAMK,EAAO/C,SAASc,cAAc,OACpCiC,EAAKJ,UAAY,kBAEjB,IAAM1H,EAAO+E,SAASc,cAAc,MACpC7F,EAAK8F,UAAYrD,EAAWzC,KAC5BA,EAAKlB,GAAL,mBAA6B2D,EAAW3D,GACxCgJ,EAAK9B,OAAOhG,GDpBV,IAAAgD,EAAA+B,SAAmB/F,cAAnB,KACDgE,EAAA8C,UAAArD,EAAAO,aCuBD8E,EAAK9B,OAAOhD,GAEZ,IAAM+E,EAAUhD,SAASc,cAAc,KDvBIkC,EAAAjC,UAAArD,EAAAsF,QCyB3CD,EAAK9B,OAAO+B,GDvBR,IAAAC,EAAAjD,SAAAc,cAAA,KACAmC,EAAAlC,UAAY,eACVkC,EAAAC,KAAApH,SAAAuD,iBAAA3B,GACDuF,EAAAE,aAAA,kBAAA,qBAAAzF,EAAA3D,IC0BLgJ,EAAK9B,OAAOgC,GDvBR,IAAAG,EAAMvH,SAAWjB,cAAY,QCmCjC,ODlCIwI,EAAAC,QAAOxH,EAECuH,EAAArJ,GAAA,qBAAuBwC,EAAvBxC,GAAAqJ,EAFDrC,UAEC,oBACCrD,EAAAzC,KADD,aACCyC,EAAAsF,QADD,kCAGXP,EAAAa,YAAAF,GC2BDX,EAAGxB,OAAO8B,GAEHN,GDvBDD,gBAAA,YAAA,EAAA/B,UAAAnE,aAAAoE,IAAAD,UAAA,GAAAA,UAAA,GAAAE,KAAA1G,aACDgD,QAAA,SAAAS,GAED,IAAA6F,EAAWjJ,SAAGK,uBAAd+C,EAAAiD,KAAAzG,KACA4E,OAAAC,KAAMlD,MAAQd,YAAAwI,EAAe,QAA7B,WACA9D,OAAA+D,SACGlI,KADIiI,EAECnE,MAAAuB,KAFDZ,QAGE0D,KAAAF","file":"main.js","sourcesContent":["let DBPromise;\r\n\r\n(() => {\r\n  const dbPromise = idb.open(\"restuarant_app_db\", 4, function(db) {\r\n    switch (db.oldVersion) {\r\n      case 0: {\r\n        const keyvalStore = db.createObjectStore(\"keyval\");\r\n        keyvalStore.put(\"value is value\", \"key\");\r\n      }\r\n\r\n      // name is the primary key\r\n      case 1: { // eslint-disable-line\r\n        db.createObjectStore(\"people\", { keyPath: \"name\" });\r\n      }\r\n\r\n      // create index 'favoriteAnimal'\r\n      case 2: { // eslint-disable-line\r\n        const peopleStore = db.transaction.objectStore(\"people\");\r\n        peopleStore.createIndex(\"animal\", \"favoriteAnimal\"); // named index as 'animal'\r\n      }\r\n\r\n      case 3: { // eslint-disable-line\r\n        const peopleStore = db.transaction.objectStore(\"people\");\r\n        peopleStore.createIndex(\"age\", \"age\");\r\n      }\r\n    }\r\n  });\r\n\r\n  dbPromise.then(db => {\r\n    const tx = db.transaction(\"people\", \"readwrite\");\r\n    const peopleStore = tx.objectStore(\"people\");\r\n    peopleStore.put({\r\n      name: \"Sam Munoz\",\r\n      age: 25,\r\n      favoriteAnimal: \"dog\"\r\n    });\r\n\r\n    peopleStore.put({\r\n      name: \"Wam ok\",\r\n      age: 34,\r\n      favoriteAnimal: \"cat\"\r\n    });\r\n\r\n    peopleStore.put({\r\n      name: \"Kim Bad\",\r\n      age: 35,\r\n      favoriteAnimal: \"dog\"\r\n    });\r\n\r\n    peopleStore.put({\r\n      name: \"Jam Good\",\r\n      age: 21,\r\n      favoriteAnimal: \"dog\"\r\n    });\r\n\r\n    return tx.complete;\r\n  });\r\n\r\n  dbPromise.then(db => {\r\n    const tx = db.transaction(\"people\");\r\n    const peopleStore = tx.objectStore(\"people\");\r\n    const animalIndex = peopleStore.index(\"animal\");\r\n\r\n    return animalIndex.getAll(\"dog\");\r\n    // return animalIndex.getAll();\r\n    // return peopleStore.getAll();\r\n  });\r\n\r\n  dbPromise\r\n    .then(db => {\r\n      const tx = db.transaction(\"people\");\r\n      const peopleStore = tx.objectStore(\"people\");\r\n      const ageIndex = peopleStore.index(\"age\");\r\n\r\n      return ageIndex.openCursor();\r\n    })\r\n    .then(cursor => {\r\n      if (!cursor) return;\r\n      // Skip first two\r\n      return cursor.advance(2);\r\n    })\r\n    .then(function logPerson(cursor) {\r\n      if (!cursor) return;\r\n      // loop each one get value out ot it\r\n      // console.log(\"Cursor at: \", cursor.value.name);\r\n      // continue looping\r\n      return cursor.continue().then(logPerson);\r\n    });\r\n\r\n  dbPromise.then(db => {\r\n    const tx = db.transaction(\"keyval\");\r\n    const keyvalStore = tx.objectStore(\"keyval\");\r\n    return keyvalStore.get(\"key\");\r\n  });\r\n\r\n  dbPromise.then(db => {\r\n    const tx = db.transaction(\"keyval\", \"readwrite\");\r\n    const keyvalStore = tx.objectStore(\"keyval\");\r\n    keyvalStore.put(\"barValue\", \"fooKey\");\r\n    return tx.complete;\r\n  });\r\n\r\n  DBPromise = openIDB();\r\n\r\n  function openIDB() {\r\n    return idb.open(\"restaurant-app\", 3, db => {\r\n      switch (db.oldVersion) {\r\n        case 0: {\r\n          // Create table 'restaurants', primary key is id\r\n          const store = db.createObjectStore(\"restaurants\", {\r\n            keyPath: \"id\"\r\n          });\r\n          // if index is needed, put down below\r\n          store.createIndex(\"by-name\", \"name\");\r\n        }\r\n\r\n        case 1: { // eslint-disable-line\r\n          db.createObjectStore(\"cuisines\");\r\n          db.createObjectStore(\"neighborhoods\");\r\n        }\r\n\r\n        case 2: { // eslint-disable-line\r\n          db.createObjectStore(\"detail\", {keyPath: \"id\"});\r\n        }\r\n      }\r\n    });\r\n  }\r\n})();\r\n\r\n/**\r\n * photograph no longer return 1.jpg\r\n in api returns 1, so format data here\r\n also the last one doesn't have, using id to replace\r\n * @param r\r\n * @returns {{} & any & {photograph: string}}\r\n */\r\nfunction formatSingleRestaurantData(r) {\r\n  return Object.assign({}, r, {\r\n    photograph: r.photograph ? `${r.photograph}.jpg` : `${r.id}.jpg`\r\n  });\r\n}\r\n\r\n/**\r\n * Format restaurants array data\r\n * @param restaurants\r\n */\r\nfunction formatRestaurantsData(restaurants) {\r\n  return restaurants.map(formatSingleRestaurantData);\r\n}\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {   // eslint-disable-line no-unused-vars\r\n\r\n  constructor() {\r\n    this.restaurants = [];\r\n    this.neighborhoods = [];\r\n    this.cuisines = [];\r\n    this.details = {};\r\n  }\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  static setLocalData(restaurants) {\r\n    this.restaurants = restaurants;\r\n  }\r\n\r\n  static fetchRestaurantsFromCache(callback) {\r\n    return DBPromise.then(db => {\r\n      // only fetch from db once\r\n      if (!db || (this.restaurants && this.restaurants.length)) {\r\n        return;\r\n      }\r\n\r\n      const tx = db.transaction(\"restaurants\");\r\n      const store = tx.objectStore(\"restaurants\").index(\"by-name\");\r\n      return store\r\n        .getAll()\r\n        .then(data => callback(null, data))\r\n        .catch(err => callback(err, null));\r\n    });\r\n  }\r\n\r\n  static fetchNeighborhoodsFromCache(callback) {\r\n    return DBPromise.then(db => {\r\n      // only fetch from db once\r\n      if (!db || (this.resneighborhoodstaurants && this.neighborhoods.length)) {\r\n        return;\r\n      }\r\n\r\n      const tx = db.transaction(\"neighborhoods\");\r\n      const store = tx.objectStore(\"neighborhoods\");\r\n      return store\r\n        .getAll()\r\n        .then(data => callback(null, data))\r\n        .catch(err => callback(err, null));\r\n    });\r\n  }\r\n\r\n  static fetchCuisinesFromCache(callback) {\r\n    return DBPromise.then(db => {\r\n      // only fetch from db once\r\n      if (!db || (this.cuisines && this.cuisines.length)) {\r\n        return;\r\n      }\r\n\r\n      const tx = db.transaction(\"cuisines\");\r\n      const store = tx.objectStore(\"cuisines\");\r\n      return store\r\n        .getAll()\r\n        .then(data => callback(null, data))\r\n        .catch(err => callback(err, null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    if (this.restaurants && this.restaurants.length) {\r\n      return this.restaurants;\r\n    }\r\n\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(res => res.json())\r\n      .then(formatRestaurantsData)\r\n      .then(data => {\r\n        DBPromise.then(db => {\r\n          const tx = db.transaction(\"restaurants\", \"readwrite\");\r\n          const store = tx.objectStore(\"restaurants\");\r\n          data && data.forEach(d => store.put(d));\r\n          return tx.complete;\r\n        });\r\n        return data;\r\n      })\r\n      .then(restaurants => callback(null, restaurants))\r\n      .then(restaurants => DBHelper.setLocalData(restaurants))\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  static fetchRestaurantByIdFromCache(id, callback) {\r\n    return DBPromise.then(db => {\r\n      // only fetch from db once\r\n      if (!db || (this.details && this.details[id])) {\r\n        return;\r\n      }\r\n\r\n      const tx = db.transaction(\"detail\");\r\n      const store = tx.objectStore(\"detail\");\r\n      return store.get(Number(id))\r\n        .then(data =>  {\r\n          console.log(\"data\", data);\r\n          callback(null, data);\r\n        })\r\n        .catch(err => callback(err, null));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.DATABASE_URL}/${id}`)\r\n      .then(res => res.json())\r\n      .then(formatSingleRestaurantData)\r\n      .then((restaurant) => {\r\n        DBPromise.then((db) => {\r\n          const tx = db.transaction('detail', 'readwrite');\r\n          const store = tx.objectStore('detail');\r\n          store.put(restaurant);\r\n          return tx.complete;\r\n        });\r\n        this.details = Object.assign({}, this.details, { [id]: restaurant });\r\n        return restaurant;\r\n      })\r\n      .then(restaurant => {\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback(\"Restaurant does not exist\", null);\r\n        }\r\n      })\r\n      .catch(error => callback(error, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != \"all\") {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != \"all\") {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n\r\n        DBPromise.then(db => {\r\n          const tx = db.transaction(\"neighborhoods\", \"readwrite\");\r\n          const store = tx.objectStore(\"neighborhoods\");\r\n\r\n          uniqueNeighborhoods &&\r\n            uniqueNeighborhoods.forEach((d, i) => store.put(d, i));\r\n        });\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n\r\n        DBPromise.then(db => {\r\n          const tx = db.transaction(\"cuisines\", \"readwrite\");\r\n          const store = tx.objectStore(\"cuisines\");\r\n\r\n          uniqueCuisines && uniqueCuisines.forEach((d, i) => store.put(d, i));\r\n        });\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    const [name, ext] = restaurant.photograph.split(\".\");\r\n    return `/img/${name}-320_small.${ext}`;\r\n  }\r\n\r\n  /**\r\n   * Generate name of different size of images\r\n   */\r\n  static imageSrcset(restaurant) {\r\n    const [name, ext] = restaurant.photograph.split(\".\");\r\n    return `/img/${name}-320_small.${ext} 400w, /img/${name}-640_medium.${ext} 640w, /img/${name}-800_large.${ext} 800w `;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n}\r\n","(() => {\r\n  window.addEventListener('load', () => {\r\n    if ('serviceWorker' in navigator) {\r\n      // Register a service worker hosted at the root of the\r\n      // site using the default scope.\r\n      navigator.serviceWorker\r\n        .register('/sw.js')\r\n        .then(function(registration) {\r\n          console.log('Service worker registration succeeded', registration);\r\n        })\r\n        .catch(function(error) {\r\n          console.log('Service worker registration failed:', error);\r\n        });\r\n    } else {\r\n      console.log('Service workers are not supported.');\r\n    }\r\n  });\r\n})();\r\n\r\nlet restaurants, // eslint-disable-line no-unused-vars\r\n  neighborhoods, // eslint-disable-line no-unused-vars\r\n  cuisines; // eslint-disable-line no-unused-vars\r\nlet map; // eslint-disable-line no-unused-vars\r\nlet markers = []; // eslint-disable-line no-unused-vars\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  DBHelper.fetchNeighborhoodsFromCache(handleNeighborhoods).then(() => {\r\n    fetchNeighborhoods();\r\n  });\r\n  DBHelper.fetchCuisinesFromCache(handleCuisines).then(() => {\r\n    fetchCuisines();\r\n  });\r\n  DBHelper.fetchRestaurantsFromCache(handlerCuisineAndNeighborhod);\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods(handleNeighborhoods);\r\n};\r\n\r\nconst handleNeighborhoods = (error, neighborhoods) => {\r\n  if (error) {\r\n    // Got an error\r\n    console.error(error);\r\n  } else {\r\n    self.neighborhoods = neighborhoods;\r\n    fillNeighborhoodsHTML(neighborhoods);\r\n  }\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  console.log('neighborhoods', neighborhoods);\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    option.name = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines(handleCuisines);\r\n};\r\n\r\nconst handleCuisines = (error, cuisines) => {\r\n  if (error) {\r\n    // Got an error!\r\n    console.error(error);\r\n  } else {\r\n    self.cuisines = cuisines;\r\n    fillCuisinesHTML();\r\n  }\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false,\r\n    keyboardShortcuts: false\r\n  });\r\n};\r\n\r\nconst handlerCuisineAndNeighborhod = (error, restaurants) => {\r\n  if (error) {\r\n    // Got an error!\r\n    console.error(error);\r\n  } else {\r\n    resetRestaurants(restaurants);\r\n    fillRestaurantsHTML();\r\n  }\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n    console.log(\"cuisine\", cuisine);\r\n    console.log(\"neighborhood\", neighborhood);\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\r\n    cuisine,\r\n    neighborhood,\r\n    handlerCuisineAndNeighborhod\r\n  );\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.alt = `Restaurant ${restaurant.name}`;\r\n  li.append(image);\r\n\r\n  const info = document.createElement('div');\r\n  info.className = 'restaurant-info';\r\n\r\n  const name = document.createElement('h3');\r\n  name.innerHTML = restaurant.name;\r\n  name.id = `restaurant-item-${restaurant.id}`;\r\n  info.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  info.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  info.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('aria-labelledby', `restaurant-detail-${restaurant.id}`);\r\n  info.append(more);\r\n\r\n  const detail = document.createElement('span');\r\n  detail.hidden = true;\r\n  detail.id = `restaurant-detail-${restaurant.id}`;\r\n  detail.innerHTML = `Restaurant name: ${restaurant.name}, address:${\r\n    restaurant.address\r\n  }, click the link to view detail`;\r\n\r\n  li.appendChild(detail);\r\n  li.append(info);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url;\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n"]}